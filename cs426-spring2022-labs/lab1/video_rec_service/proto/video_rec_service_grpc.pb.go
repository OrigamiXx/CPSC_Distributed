// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoRecServiceClient is the client API for VideoRecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoRecServiceClient interface {
	GetTopVideos(ctx context.Context, in *GetTopVideosRequest, opts ...grpc.CallOption) (*GetTopVideosResponse, error)
	// monitoring APIs
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type videoRecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRecServiceClient(cc grpc.ClientConnInterface) VideoRecServiceClient {
	return &videoRecServiceClient{cc}
}

func (c *videoRecServiceClient) GetTopVideos(ctx context.Context, in *GetTopVideosRequest, opts ...grpc.CallOption) (*GetTopVideosResponse, error) {
	out := new(GetTopVideosResponse)
	err := c.cc.Invoke(ctx, "/video_rec_service.VideoRecService/GetTopVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoRecServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/video_rec_service.VideoRecService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoRecServiceServer is the server API for VideoRecService service.
// All implementations must embed UnimplementedVideoRecServiceServer
// for forward compatibility
type VideoRecServiceServer interface {
	GetTopVideos(context.Context, *GetTopVideosRequest) (*GetTopVideosResponse, error)
	// monitoring APIs
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedVideoRecServiceServer()
}

// UnimplementedVideoRecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoRecServiceServer struct {
}

func (UnimplementedVideoRecServiceServer) GetTopVideos(context.Context, *GetTopVideosRequest) (*GetTopVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopVideos not implemented")
}
func (UnimplementedVideoRecServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedVideoRecServiceServer) mustEmbedUnimplementedVideoRecServiceServer() {}

// UnsafeVideoRecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoRecServiceServer will
// result in compilation errors.
type UnsafeVideoRecServiceServer interface {
	mustEmbedUnimplementedVideoRecServiceServer()
}

func RegisterVideoRecServiceServer(s grpc.ServiceRegistrar, srv VideoRecServiceServer) {
	s.RegisterService(&VideoRecService_ServiceDesc, srv)
}

func _VideoRecService_GetTopVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRecServiceServer).GetTopVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video_rec_service.VideoRecService/GetTopVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRecServiceServer).GetTopVideos(ctx, req.(*GetTopVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoRecService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoRecServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video_rec_service.VideoRecService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoRecServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoRecService_ServiceDesc is the grpc.ServiceDesc for VideoRecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoRecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video_rec_service.VideoRecService",
	HandlerType: (*VideoRecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopVideos",
			Handler:    _VideoRecService_GetTopVideos_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _VideoRecService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video_rec_service/proto/video_rec_service.proto",
}
